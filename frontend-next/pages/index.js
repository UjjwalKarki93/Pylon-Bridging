import styles from "../styles/Home.module.css";
import { useRef } from "react";
import { Button } from "semantic-ui-react";
import { customChainProvider, useWeb3Context } from "../context/Web3Context";
import { getContract } from "../components/hooks/useContract";
import { utils, ethers } from "ethers";
import { ethPetnAddress, bscPetnAddress } from "../constants";

export default function Home() {
  const { chain, provider: currentProvider, account, c } = useWeb3Context();

  const inputRef = useRef();

  //load contract and listen for transfer events generated by bridge after burning tokens
  const load = async () => {
    if (chain == "80001") {
      const provider = await customChainProvider(97);
      const ethBridge = await getContract("ethBridge", currentProvider);
      const bscBridge = await getContract("bscBridge", provider);
      ethBridge.on(
        "Transfer",
        async (from, to, amount, date, nonce, signature, process) => {
          console.log("One Transfer event captured on Goerli!");
          const bscWallet = new ethers.Wallet(process.env.PRIVATE_KEY);
          const bscSigner = bscWallet.connect(provider);
          const bridge = bscBridge.connect(bscSigner);
          console.log("About to mint on BSC Testnet!");
          await bridge.mint(from, to, amount, nonce, signature);
          console.log("Minted on BSC Testnet!");
        }
      );
    } else if (chain == 97) {
      const { customProvider: polygonProvider, signer: polygonSigner } =
        await customChainProvider(80001);
      // console.log("polygon signer", polygonSigner);
      console.log(
        "....................................................................................."
      );
      console.log(
        "---------Proces Started AT POLYGON MUMBAI TESTNET-----------"
      );
      console.log("Processing Your Transfer Request..");
      const bscBridge = await getContract("bscBridge", currentProvider);

      // console.log("bscbridge", bscBridge);

      const polygonBridge = await getContract("ethBridge", polygonProvider);
      // console.log("polygonBRisge", polygonBridge);

      bscBridge.on(
        "Transfer",
        async (from, to, amount, date, nonce, signature, process) => {
          // console.log("Transfer Datas", {
          //   from: from,
          //   to: to,
          //   amount: amount.toString(),
          //   nonce: nonce,
          //   signature: signature,
          // });
          console.log("started bridiging process.....");
          const bridge = polygonBridge.connect(polygonSigner);
          console.log("Bridinng in progress........Donot refresh ");
          bridge.mint(from, to, amount, nonce, signature).then(async (tx) => {
            await tx.wait();
            console.log("Successfully Brdiged! please checkout.......");
          });
        }
      );
    } else {
      alert("Change Your Netwok To Either BSC testnet or Polygon Mumbai ! ");
    }
  };

  const bridgeHandler = async () => {
    const parsedAmount = await utils.parseEther(inputRef.current.value);

    if (chain == 80001) {
      const { signer: ethBrdigeSigner } = await customChainProvider(80001);
      console.log("bridging......");

      const ethBridge = await getContract("ethBridge", currentProvider);

      const bridge = ethBridge.connect(await ethBrdigeSigner);

      const count = await bridge.transactionCount(`${account}`);
      //------------------------------------------------------------------------------

      //------------------------------------------------------------------------------
      const hashedMessage = utils.solidityKeccak2800016(
        ["address", "uint256", "uint256"],
        [account[0], parsedAmount, Number(count) + 1]
      );
      console.log("hashed msg", hashedMessage);
      const fromatedHashMsg = utils.arrayify(hashedMessage);
      const signature = await ethBrdigeSigner.signMessage(fromatedHashMsg);
      console.log("signature", signature);
      console.log("Bridging........Donot refresh");
      //will emit transfer event on ethBridge Contract
      bridge.burn(account[0], parsedAmount, signature).then(async (tx) => {
        const reciept = await tx.wait(1);
        console.log(reciept.events);
      });
    } else if (chain == 97) {
      const bscBrdigeSigner = await currentProvider.getSigner();
      console.log("bscSIgner", bscBrdigeSigner);

      console.log("---------PROCESS STARTED AT BSC TESTNET------");

      const bscBridge = await getContract("bscBridge", currentProvider);
      const bridge = bscBridge.connect(bscBrdigeSigner);
      const count = await bridge.transactionCount(`${account[0]}`);

      // console.log("Types:", ["address", "uint256", "uint256"]);
      // console.log("Values:", [account, parsedAmount, Number(count) + 1]);
      const hashedMessage = utils.solidityKeccak256(
        ["address", "uint256", "uint256"],
        [account[0], parsedAmount, Number(count) + 1]
      );

      const fromatedHashMsg = utils.arrayify(hashedMessage);
      const signature = await bscBrdigeSigner.signMessage(fromatedHashMsg);
      console.log("collecting your signatuere...");
      // console.log(`signature of ${account} in bsc`, signature);
      // console.log("Bridging........Donot refresh");

      // console.log("signature wile burning in bsc", signature);
      //will emit transfer event on ethBridge Contract

      console.log("Burning Your Tokens......");
      bridge.burn(account[0], parsedAmount, signature).then(async (tx) => {
        await tx.wait();
        console.log("Successfully Burnt   !!!!!");
        console.log("Request for transfer To Polygon.................");
        await load();
      });
    } else {
      alert("switch your network to goerli or bsc testnet");
    }
  };

  const addTokenHandler = async () => {
    if (chain != (80001 || 97)) {
      alert("switch your network to bsc or goerli");
    }
    const tokenAddress = chain == 97 ? bscPetnAddress : ethPetnAddress;
    console.log("token address", tokenAddress);
    window.ethereum
      .request({
        method: "wallet_watchAsset",
        params: {
          type: "ERC20",
          options: {
            address: `${tokenAddress}`,
            symbol: "PETN",
            decimals: 18,
          },
        },
      })
      .then((success) => {
        if (success) {
          alert("Petn successfully added to wallet!");
        } else {
          throw new Error("Something went wrong.");
        }
      })
      .catch(console.error);
  };

  return (
    <div className={styles.container}>
      {chain ? (
        <>
          <h1>PYLON BRIDGE</h1>
          <h3>
            Currently Connected To{" "}
            {chain == 97 ? "BSC TESTNET" : "POLYGON MUMBAI"}
          </h3>
          <label>Bridge To {chain == 97 ? "POLYGON MUMBAI" : "BSC"}</label>
          <br />
          <input ref={inputRef} step="any" placeholder="amount" />

          <hr />
          <Button onClick={bridgeHandler}>Transfer</Button>
          <hr />
          <p>Add PETN In Your Wallet</p>
          <Button onClick={addTokenHandler}>Configure</Button>
        </>
      ) : (
        <p>Connect your wallet first...</p>
      )}
    </div>
  );
}
